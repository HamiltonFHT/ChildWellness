{
    "contents" : "#' BMI Analysis for custom search from PSS\n#' Copyright (C) 2014  Tom Sitter - Hamilton Family Health Team\n#' \n#' This program is free software; you can redistribute it and/or modify\n#' it under the terms of the GNU General Public License as published by\n#' the Free Software Foundation; either version 2 of the License, or\n#' (at your option) any later version.\n#' \n#' This program is distributed in the hope that it will be useful,\n#' but WITHOUT ANY WARRANTY; without even the implied warranty of\n#' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#' GNU General Public License for more details.\n#' \n#' You should have received a copy of the GNU General Public License along\n#' with this program; if not, write to the Free Software Foundation, Inc.,\n#' 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n\n\n#' TODO:\n#'     Confirm outlier criteria\n\n\n#' Child Wellness Report Generators\n#' Produces three registries:\n#' BMI never measured\n#' BMI 1 year out of date\n#' BMI up-to-date (both height and weight measured within 1 year)\n#' Produces three plots:\n#'  # of patients in each of the above 3 registries\n#'  # of up-to-date patients in each BMI category\n#'  Boxplot for date of last weight and date of last height to see if they are being measured at same time.\n\n\n\n\n\nrunReport <- function() {\n  \n  #+\n  # Prompt user for file to read\n  input_files = choose.files();\n  \n  if (length(input_files) == 0) {\n    stop(\"No file selected\");\n  }\n\n  #+ \n  # Prompt user for folder to save results to \n  output_dir = choose.dir(default=dirname(input_files[[1]]),caption=\"Select a directory to save files to\");\n\n  \n  if (is.na(output_dir)) {\n    output_dir = getwd();\n    print(\"Saving to working directory: \");\n    print(getwd());\n  }\n  \n\n  #get age ranges\n  minAge = as.numeric(winDialogString(message=\"What is the minimum age?\", default=\"2\"))\n  \n  if (minAge < 0) {\n    minAge = 2\n  } else if (minAge > 100) {\n    minAge = 100\n  } else if (is.na(minAge)) {\n    minAge = 2\n  }\n  \n  maxAge = as.numeric(winDialogString(message=\"What is the maximum age?\", default=\"5\"))\n  if (maxAge < 0) {\n    maxAge = 2\n  } else if (maxAge > 100) {\n    maxAge = 100\n  } else if (is.na(maxAge)) {\n    maxAge = 18\n  }\n   \n\n  master_data = c()\n  master_count = c()\n  #master_change = list()\n  \n  for (i in 1:length(input_files)) {\n    \n    if (length(input_files) == 1) {\n      current_file = input_files\n    } else {\n      current_file = input_files[i]\n    }\n    \n    # Get filename\n    filename = basename(sub(\"\\\\.txt\",\"\",current_file,fixed=FALSE))\n        \n    #Read Report File\n    data = readReport(current_file)\n    \n    #Handle for empty data (maybe age range doesn't make sense?)\n        \n    # Get the current date, and one year ago\n    current_date = data$Current.Date[1]\n\n    #Get current age in years \n    data$Calc.Age <- (current_date - data$Birth.Date)/365.25\n    \n    #Create Registries\n    reg = getRegistries(data, minAge, maxAge, current_date)\n    \n    if (length(input_files) > 1) {\n      total = nrow(reg$data)\n      utd = nrow(reg$up_to_date)\n      master_data = rbind(master_data, c(current_date, total, utd, utd/total, nrow(reg$never_done),\n                            nrow(reg$out_of_date)))\n    }\n    \n    #Print Graphs\n    saveStatusGraph(output_dir, filename,\n                    nrow(reg$never_done), nrow(reg$up_to_date), nrow(reg$out_of_date), nrow(reg$data),\n                    current_date)\n    \n    bmi_count <- saveGrowthConcern(output_dir, filename, reg, current_date)\n    bmi_count <- union(as.numeric(current_date), bmi_count)\n    master_count <- rbind(master_count, bmi_count)\n    \n    saveHeightWeightCharts(output_dir, filename, reg$data)\n\n    #Print Registries\n    saveRegistries(output_dir, current_date, filename, reg)\n  }\n  \n  #TODO - handle master_data\n  if (length(input_files) > 1) {\n    createMasterTable(output_dir, filename, master_data[order(master_data[,1]),], master_count[order(master_count[,1]),], minAge, maxAge);\n  }\n  \n  winDialog(type=\"ok\",\n            paste(\"Finished! You can find the files in \", output_dir, sep=\"\"));\n}\n    \nreadReport <- function(input_file) {\n    \n    data = read.csv(input_file)\n    \n    #+\n    #' Convert to R dates\n    data$Date.of.Latest.Height = as.Date(data$Date.of.Latest.Height, format=\"%b %d, %Y\")\n    data$Date.of.Latest.Weight = as.Date(data$Date.of.Latest.Weight, format=\"%b %d, %Y\")\n    data$Date.of.Latest.BMI = as.Date(data$Date.of.Latest.BMI, format=\"%b %d, %Y\")\n    data$Date.of.Latest.BMI.Percentile = as.Date(data$Date.of.Latest.BMI.Percentile, format=\"%b %d, %Y\")\n    data$Current.Date = as.Date(data$Current.Date, format=\"%b %d, %Y\")\n    data$Birth.Date = as.Date(data$Birth.Date, format=\"%b %d, %Y\")\n        \n    # Convert BMI percentile to number\n    data$Latest.BMI.Percentile <- as.numeric(as.character(data$Latest.BMI.Percentile))\n    data$Latest.BMI <- as.numeric(as.character(data$Latest.BMI))\n  \n    return(data)\n}\n\ngetRegistries <- function(data, minAge, maxAge, current_date) {\n    #+\n    #' Create Registries\n    #' May not add up to all patients due to outliers and data entry issues.\n    \n    #Subset based on user specified age range\n    data = subset(data, data$Calc.Age >= minAge & data$Calc.Age <= maxAge);\n  \n    one_year_ago = seq(current_date, length=2, by= \"-12 months\")[2]\n    \n    #' Outliers\n    #' BMI < 11 or BMI > 40\n    #' Date of measurement more recent than date of report\n    #' Height < ?\n    #' Weight < ?\n  \n    #' Remove outliers from dataframe\n    outliers = subset(data, data$Latest.BMI < 11 | data$Latest.BMI > 40 | \n                      data$Date.of.Latest.Height > current_date |\n                      data$Date.of.Latest.Weight > current_date | \n                      data$Date.of.Latest.BMI > current_date)\n\n    data = data[!data$Patient.. %in% outliers$Patient..,]\n        \n    out_of_date = subset(data, (data$Date.of.Latest.Height <= one_year_ago | \n                                  data$Date.of.Latest.Weight <= one_year_ago) &\n                             !is.na(data$Date.of.Latest.BMI))\n    \n    never_done = subset(data, is.na(data$Date.of.Latest.BMI))\n    \n    up_to_date = subset(data, data$Date.of.Latest.Height > one_year_ago &\n                            data$Date.of.Latest.Weight > one_year_ago)\n    \n    #+ Get BMI status of up to date patients\n    severely_wasted = subset(up_to_date, \n                             up_to_date$Latest.BMI.Percentile<0.1)\n    wasted = subset(up_to_date, \n                    up_to_date$Latest.BMI.Percentile>=0.1 &\n                      up_to_date$Latest.BMI.Percentile<3)\n    normal = subset(up_to_date, \n                    up_to_date$Latest.BMI.Percentile>3 &\n                      up_to_date$Latest.BMI.Percentile<85)\n    risk_of_overweight = subset(up_to_date, \n                                up_to_date$Latest.BMI.Percentile>=85 &\n                                  up_to_date$Latest.BMI.Percentile<97)\n    overweight = subset(up_to_date, \n                        up_to_date$Latest.BMI.Percentile>=97 &\n                          up_to_date$Latest.BMI.Percentile<99.9)\n    obese = subset(up_to_date, \n                   up_to_date$Latest.BMI.Percentile>=99.9)\n    \n    #At risk registry is everyone not in the normal weight category\n    at_risk = rbind(severely_wasted, \n                    wasted, \n                    risk_of_overweight, \n                    overweight, \n                    obese)\n    \n    \n    registries <- list(\"never_done\" = never_done,\n                       \"out_of_date\" = out_of_date,\n                       \"up_to_date\" = up_to_date,\n                       \"out_of_date_never_done\" = merge(out_of_date, never_done, all=TRUE),\n                       \"severely_wasted\" = severely_wasted,\n                       \"wasted\" = wasted,\n                       \"normal\" = normal,\n                       \"risk_of_overweight\" = risk_of_overweight,\n                       \"overweight\" = overweight,\n                       \"obese\" = obese,\n                       \"at_risk\" = at_risk,\n                       \"outliers\" = outliers,\n                       \"data\" = data)\n\n    return(registries)\n}\n\nsaveStatusGraph <- function(output_dir, filename, \n                            num_never_done, num_up_to_date, num_out_of_date, num_total, \n                            current_date) {\n  # Get counts of number of patients in each registry\n\n  status_counts = c(num_total, num_up_to_date, num_out_of_date, num_never_done)\n  status_labels = c(\"Total\", \"Up to Date\", \"Out of Date\", \"Never Done\")\n  status_colours = c(\"mediumpurple2\", \"darkolivegreen3\", \"orangered3\", \"dodgerblue3\")\n  \n  filename = paste(\"BMI_Status\", filename, sep=\"-\")\n  filename = paste(filename, \"png\", sep=\".\")\n  png(filename=paste(output_dir, filename, sep=\"/\"))\n  # Make left margin larger for legend text\n  par(mar = c(5,8,4,2) + 0.1);\n  # Horizontal bar chart\n  bp_status <- barplot(status_counts, col=status_colours, horiz=TRUE,\n                       legend.text=status_labels,\n                       xlab=\"Number of patients\", \n                       main=paste(\"Total Peds 2 to 5 years (n=\",num_total,\") \\nas of \",\n                                  format(current_date, \"%b %d, %Y\"), sep=\"\"));\n\n  # Make an adjusted vector for bar count positioning\n  adjusted_count = c()\n  index = 1\n  for(i in status_counts) {if (i < 25) {adjusted_count[index]=i*2+40} \n                        else {adjusted_count[index]=i}\n                        index = index+1\n  }\n  \n  # Add axis labels\n  axis(2, at = bp_status, labels=status_labels, las=1);\n  text(x=adjusted_count/2, y=bp_status,\n       labels=as.character(status_counts), xpd=TRUE)\n  dev.off();\n}\n\nsaveGrowthConcern <- function(output_dir, filename, reg, current_date) {\n\n  # Store results in vectors\n  bmi_labels = c(\"Severely Wasted\", \"Wasted\", \"Normal\", \"Risk of Overweight\", \"Overweight\", \"Obese\");\n  bmi_counts <- c(nrow(reg$severely_wasted), \n                  nrow(reg$wasted), nrow(reg$normal), nrow(reg$risk_of_overweight), nrow(reg$overweight), nrow(reg$obese));\n  bmi_colours = c(\"dodgerblue3\", \"orangered3\", \"darkolivegreen3\", \"mediumpurple2\", \"mediumturquoise\", \"orange\", \"lightskyblue\");\n  \n  \n  filename=paste(\"BMI_Count\", filename, sep=\"-\")\n  filename=paste(filename, \"png\", sep=\".\")\n  png(filename=paste(output_dir, filename, sep=\"/\"));\n  \n  # Make left margin larger for legend text\n  par(mar = c(5,4,6,2) + 0.1);\n  # Plot BMI status\n  bp_bmi <- barplot(bmi_counts, \n                    main=paste(\"Total Peds 2 to 5 years with up to date BMI \",\n                               \"(n=\",nrow(reg$up_to_date),\"/\", nrow(reg$data), \") \\nas of \",\n                               format(current_date, \"%b %d, %Y\"), sep=\"\"), \n                    ylab=\"Number of patients\", \n                    col=bmi_colours,\n                    legend.text=bmi_labels,\n                    las=2);\n  text(bp_bmi, \n       par(\"usr\")[3], \n       labels=bmi_labels, \n       srt=40, xpd=TRUE, adj=c(1.1, 1.1), cex=0.9);\n  \n  # Make an adjusted vector for bar count positioning\n  adjusted_count = c()\n  index = 1\n  for(i in bmi_counts) {if (i < 10) {adjusted_count[index]=i*2+10} \n                        else {adjusted_count[index]=i}\n                        index = index+1\n  }\n  \n  \n  text(y=adjusted_count/2, x=bp_bmi, \n       labels=as.character(bmi_counts), xpd=TRUE, \n       fontface=\"bold\")\n  dev.off();\n  return(bmi_counts)\n}\n\nsaveHeightWeightCharts <- function(output_dir, filename, data) {\n  #Plot Date of Latest Height vs Date of Latest Weight\n  \n  filename = paste(\"HeightWeightBoxplot\", filename, sep=\"-\")\n  filename = paste(filename, \"png\", sep=\".\")\n  png(filename=paste(output_dir, filename, sep=\"/\"));\n  \n  boxplot(data$Date.of.Latest.Height, data$Date.of.Latest.Weight, \n          names=c(\"Height\", \"Weight\"),\n          col=c(\"darkolivegreen3\", \"lightskyblue\"), \n          main=\"Date of Latest Height and Weight\")\n  \n  dev.off()\n  \n  # Previously used scatter plot\n  \n  # HvW_data = data[!data$Patient.. %in% outliers$Patient..,]\n  # png(filename=paste(output_dir, \"HeightvsWeight.png\", sep=\"/\"));\n  # plot(HvW_data$Date.of.Latest.Weight, HvW_data$Date.of.Latest.Height, \n  #      xaxt=\"n\", yaxt=\"n\",\n  #      main=\"Date of Latest Weight vs. Height\",\n  #      xlab=\"Date of Latest Weight\", \n  #      ylab=\"Date of Latest Height\")\n  # axis.Date(side = 2, x=HvW_data$Date.of.Latest.Height, format = \"%Y\")\n  # axis.Date(side = 1, x=HvW_data$Date.of.Latest.Weight, format = \"%Y\")\n  # abline(a=0, b=1, col=\"green\")\n  # dev.off()\n  \n}\n\nsaveRegistries <- function(output_dir, current_date, filename, reg) {\n      \n    #' Prepare to save registries. Check to make sure xlsx library is installed and install if necessary\n    #' Write to a CSV text file otherwise.\n    if (\"xlsx\" %in% rownames(installed.packages())) {\n      require(xlsx)\n      writeToExcel(output_dir, filename, reg$out_of_date_never_done, reg$at_risk, reg$outliers)\n    } else {\n      \n      response = winDialog(type=\"yesno\", \n                           \"Did not find Excel libraries. Would you like to install them now?\\nYou must be connected to the internet and have Excel installed on this computer\")\n      \n      if (response == \"YES\") {\n        \n        install.packages(\"xlsx\")\n        require(xlsx)\n        \n        if (\"xlsx\" %in% rownames(installed.packages())) {\n          writeToExcel(output_dir, current_date, filename, reg$out_of_date_never_done, reg$at_risk, reg$outliers)\n        } else {\n          winDialog(type=\"ok\", \n                    \"Something went wrong installing excel libraries ('xlsx'). Writing to text files.\");\n          writeToCSV(output_dir, current_date, filename, reg$out_of_date_never_done, reg$at_risk, reg$outliers)\n        }\n      }\n      else {\n        writeToCSV(output_dir, current_date, filename, reg$out_of_date_never_done, reg$at_risk, reg$outliers)\n      }\n  }\n}\n\n\ncreateMasterTable <- function(output_dir, filename, master_data, master_count, minAge, maxAge) {\n  \n  # Turn data into a data frame\n  df.MD <- data.frame(master_data)\n  df.MC <- data.frame(master_count)\n  \n  # Give column names\n  age_string = sprintf(\"Total Peds %s yrs to %s yrs\", minAge, maxAge)\n  colnames(df.MD) <- c(\"Date of Data Capture\", age_string, \n                    sprintf(\"%s up to date BMI (12 months)\", age_string), \"Percentage\",\n                    sprintf(\"%s w/o BMI (never done)\", age_string),\n                    sprintf(\"%s w/ out-of-date BMI\", age_string))\n  df.MD$\"Date of Data Capture\" <- as.Date(df.MD$\"Date of Data Capture\", origin=\"1970-01-01\")\n  \n  colnames(df.MC) <- c(\"Date of Data Capture\", \"Severely Wasted\", \"Wasted\", \"Normal\", \n                       \"Risk of Overweight\", \"Overweight\", \"Obese\")\n  df.MC$\"Date of Data Capture\" <- as.Date(df.MC$\"Date of Data Capture\", origin=\"1970-01-01\")\n  \n  # Create workbook and title\n  excel_file <- paste(output_dir, \n                     sprintf(\"Child_Wellness_Master_Table_%s.xlsx\", Sys.Date()), \n                     sep=\"/\");\n  outwb <- createWorkbook(type=\"xlsx\")\n  \n  # Create Summary Sheet\n  sheet.MD <- createSheet(outwb, sheetName=\"Summary\")\n  setColumnWidth(sheet.MD, 1:6, 15)\n  csPerc <- CellStyle(outwb, dataFormat=DataFormat(\"0.00%\"))\n  csWrap <- CellStyle(outwb, alignment=Alignment(wrapText=T))\n  df.MD.colPerc <- list('4'=csPerc)\n  addDataFrame(df.MD, sheet.MD, colStyle=c(df.MD.colPerc), row.names=F)\n  \n  # Word wrap the header rows\n  row <- getRows(sheet.MD, rowIndex=1)\n  cell <- getCells(row)\n  for (i in 1:6){\n    setCellStyle(cell[[paste('1.',i, sep=\"\")]], csWrap)\n  }\n  \n  # Create count sheet\n  sheet.MC <- createSheet(outwb, sheetName=\"Count\")\n  setColumnWidth(sheet.MC, 1:7, 12)\n  csCenter <- CellStyle(outwb, alignment=Alignment(h=\"ALIGN_CENTER\"))\n  df.MC.colCenter <- list('2'=csCenter, '3'=csCenter, '4'=csCenter,\n                          '5'=csCenter, '6'=csCenter, '7'=csCenter)\n  addDataFrame(df.MC, sheet.MC, colStyle=c(df.MC.colCenter), row.names=F)\n  row <- getRows(sheet.MC, rowIndex=1)\n  cell <- getCells(row)\n  for (i in 1:7){\n    setCellStyle(cell[[sprintf('1.%d',i)]], csWrap)\n  }\n  \n  # Create Percent Change sheet\n\n  \n  # Create Up-to-date over time chart\n  \n  \n  # Save Workbook\n  saveWorkbook(outwb, excel_file)\n  \n}\n\n#Write registries to three seperate CSV files\nwriteToCSV <- function(output_dir=getwd(), current_date=Sys.Date(), filename, out_of_date_never_done=data.frame(), at_risk=data.frame(), outliers=data.frame()) {\n  file_ending = paste(format(current_date, \"_%d%b%Y\"), \"_\", filename, \".txt\", sep=\"\")\n  out_of_date_file = paste(\"CW_OutOfDate\", file_ending, sep=\"\");\n  at_risk_file = paste(\"CW_AtRisk\", file_ending, sep=\"\");\n  outliers_file = paste(\"CW_Outliers\", file_ending, sep=\"\");\n  \n  write.csv(out_of_date_never_done,\n            file=paste(output_dir, out_of_date_file, sep=\"/\"),\n            row.names=FALSE)\n  write.csv(at_risk[order(at_risk$Latest.BMI.Percentile, decrease=TRUE), ],\n            file=paste(output_dir, at_risk_file, sep=\"/\"),\n            row.names=FALSE)\n  write.csv(outliers,\n            file=paste(output_dir, outliers_file, sep=\"/\"),\n            row.names=FALSE)\n}\n\n#Write registries to excel file (requires R xlsx package)\nwriteToExcel <- function(output_dir=getwd(), filename, out_of_date_never_done=data.frame(), at_risk=data.frame(), outliers=data.frame()) {\n  excel_file = paste(output_dir, \n                     paste(\"Child_Wellness_Registries\", \"_\", filename, \".xlsx\", sep=\"\"), \n                     sep=\"/\");\n  write.xlsx(out_of_date_never_done,\n             file=excel_file, \n             sheetName=\"Out Of Date\", \n             row.names=FALSE);\n  write.xlsx(at_risk, \n             file=excel_file, \n             sheetName=\"At Risk\",\n             row.names=FALSE,\n             append=TRUE);\n  write.xlsx(outliers, \n             file=excel_file, \n             sheetName=\"Outliers\",\n             row.names=FALSE,\n             append=TRUE);\n}\n#+\n#' Run Application\nrunReport()",
    "created" : 1406038459059.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2553194719",
    "id" : "8CBCFFD",
    "lastKnownWriteTime" : 1406664600,
    "path" : "~/GitHub/ChildWellness/BMI_Analysis.R",
    "project_path" : "BMI_Analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}