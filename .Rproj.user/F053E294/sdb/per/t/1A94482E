{
    "contents" : "#' BMI Analysis for custom search from PSS\n#' Copyright (C) 2014  Tom Sitter - Hamilton Family Health Team\n#' \n#' This program is free software; you can redistribute it and/or modify\n#' it under the terms of the GNU General Public License as published by\n#' the Free Software Foundation; either version 2 of the License, or\n#' (at your option) any later version.\n#' \n#' This program is distributed in the hope that it will be useful,\n#' but WITHOUT ANY WARRANTY; without even the implied warranty of\n#' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#' GNU General Public License for more details.\n#' \n#' You should have received a copy of the GNU General Public License along\n#' with this program; if not, write to the Free Software Foundation, Inc.,\n#' 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n\n\n#' TODO:\n#'     Confirm outlier criteria\n\n\n#' Child Wellness Report Generators\n#' Produces three registries:\n#' BMI never measured\n#' BMI 1 year out of date\n#' BMI up-to-date (both height and weight measured within 1 year)\n#' Produces three plots:\n#'  # of patients in each of the above 3 registries\n#'  # of up-to-date patients in each BMI category\n#'  Boxplot for date of last weight and date of last height to see if they are being measured at same time.\n\nrunReport <- function() {\n  \n  #+\n  # Prompt user for file to read\n  input_files = choose.files();\n  \n  if (length(input_files) == 0) {\n    stop(\"No file selected\");\n  }\n\n  #+ \n  # Prompt user for folder to save results to \n  output_dir = choose.dir(default=dirname(input_files[[1]]),caption=\"Select a directory to save files to\");\n\n  \n  #If no output directory selected, using the working directory\n  if (is.na(output_dir)) {\n    output_dir = getwd();\n    print(\"Saving to working directory: \");\n    print(getwd());\n  }\n  \n  age_range = getAgeRange()\n  minAge = age_range[1]\n  maxAge = age_range[2]\n\n   \n  #comparison data between reports\n  master_data = c()\n  master_count = c()\n\n  num_files = length(input_files)\n  \n  if (num_files > 1) {\n    pb <- winProgressBar(title=\"Progress...\", min=0, max=num_files, width=300)\n  }\n  \n  #Process each file\n  for (i in 1:num_files) {\n    \n    if (num_files == 1) {\n      current_file = input_files\n    } else {\n      current_file = input_files[i]\n      if (exists(\"pb\")) {\n        setWinProgressBar(pb, i, title=sprintf(\"Progress (File %d of %d)\", i, num_files))\n      }\n    }\n    \n    # Get filename\n    filename = basename(sub(\"\\\\.txt\",\"\",current_file,fixed=FALSE))\n        \n    #Read Report File\n    data = readReport(current_file)\n            \n    # Get the current date, and one year ago\n    current_date = data$Current.Date[1]\n\n    #Get current age in years \n    data$Calc.Age <- (current_date - data$Birth.Date)/365.25\n    \n    #Create Registries\n    reg = getRegistries(data, minAge, maxAge, current_date)\n    \n    \n    #If multiple files, store aggregate values in master data\n    if (length(input_files) > 1) {\n      total = nrow(reg$data)\n      utd = sum(reg$up_to_date)\n      master_data = rbind(master_data, c(current_date, total, utd, utd/total, sum(reg$never_done), sum(reg$out_of_date)))\n    }\n    \n    #Print Graphs\n    saveStatusGraph(output_dir, filename, minAge, maxAge,\n                    sum(reg$never_done), sum(reg$up_to_date),sum(reg$out_of_date), nrow(reg$data),\n                    current_date)\n    \n    bmi_count <- saveGrowthConcern(output_dir, filename, minAge, maxAge, reg, current_date)\n    bmi_count <- union(as.numeric(current_date), bmi_count)\n    \n    #acummulate number of patients in each weight category\n    master_count <- rbind(master_count, bmi_count)\n    \n    #Save height and weight data comparison chart(s)\n    saveHeightWeightCharts(output_dir, filename, reg$data)\n\n    #Print Registries to excel or csv depending on avilable libraries\n    saveRegistries(output_dir, current_date, filename, reg)\n    \n\n  }\n  \n  #Save comparison data to file if multiple files read in\n  if (length(input_files) > 1) {\n    createMasterTable(output_dir, max(master_data[,1]),\n                      master_data[order(master_data[,1]),],\n                      master_count[order(master_count[,1]),],\n                      minAge, maxAge);\n  }\n  \n  #Close and delete progress bar\n  if (exists(\"pb\")) {\n    close(pb)\n    rm(pb)\n  }\n  \n  winDialog(type=\"ok\",\n            sprintf(\"Finished! You can find the files in %s\", output_dir));\n}\n  \ngetAgeRange <- function() {\n  #get age ranges from user\n  minAge = as.numeric(winDialogString(message=\"What is the minimum age?\", default=\"2\"))\n  \n  if (minAge < 0) {\n    minAge = 2\n  } else if (minAge > 100) {\n    minAge = 100\n  } else if (is.na(minAge)) {\n    minAge = 2\n  }\n  \n  maxAge = as.numeric(winDialogString(message=\"What is the maximum age?\", default=\"5\"))\n  if (maxAge < 0) {\n    maxAge = 2\n  } else if (maxAge > 100) {\n    maxAge = 100\n  } else if (is.na(maxAge)) {\n    maxAge = 18\n  }\n  \n  return(c(minAge, maxAge));\n}\n\nreadReport <- function(input_file) {\n    \n    #Read in comma-separated text file\n    data = read.csv(input_file)\n    \n    if (nrow(data) == 0) {\n      winDialog(type=\"ok\",\n                sprintf(\"No data found in file %s!\", input_file));\n      stop(\"No data found in file\")\n    }\n    \n    #+\n    #' Convert data columns to R dates\n    data$Date.of.Latest.Height = as.Date(data$Date.of.Latest.Height, format=\"%b %d, %Y\")\n    data$Date.of.Latest.Weight = as.Date(data$Date.of.Latest.Weight, format=\"%b %d, %Y\")\n    data$Date.of.Latest.BMI = as.Date(data$Date.of.Latest.BMI, format=\"%b %d, %Y\")\n    data$Date.of.Latest.BMI.Percentile = as.Date(data$Date.of.Latest.BMI.Percentile, format=\"%b %d, %Y\")\n    data$Current.Date = as.Date(data$Current.Date, format=\"%b %d, %Y\")\n    data$Birth.Date = as.Date(data$Birth.Date, format=\"%b %d, %Y\")\n        \n    # Convert BMI percentile to numberic values\n    data$Latest.BMI.Percentile <- as.numeric(as.character(data$Latest.BMI.Percentile))\n    data$Latest.BMI <- as.numeric(as.character(data$Latest.BMI))\n  \n    return(data)\n}\n\ngetRegistries <- function(data, minAge, maxAge, current_date) {\n    #+\n    #' Create Registries\n    #' May not add up to all patients due to outliers and data entry issues.\n    \n    #Subset based on user specified age range and privacy\n    data = subset(data, data$Calc.Age >= minAge & data$Calc.Age <= maxAge & data$Privacy != \"Private Chart\");\n  \n    if (nrow(data) == 0) {\n      winDialog(type=\"ok\",\n                sprintf(\"No data found in age range %d to %d!\\nRe-run with new age range?\", minAge, maxAge));\n      stop(\"No data found in age range\")\n    }\n    \n    one_year_ago = seq(current_date, length=2, by= \"-12 months\")[2]\n    \n    #' Outliers\n    #' BMI < 11 or BMI > 40\n    #' Date of measurement more recent than date of report\n    #' Height < ?\n    #' Weight < ?\n  \n    #' Remove outliers from dataframe\n    outliers = subset(data, data$Latest.BMI < 11 | data$Latest.BMI > 40 | \n                      data$Date.of.Latest.Height > current_date |\n                      data$Date.of.Latest.Weight > current_date | \n                      data$Date.of.Latest.BMI > current_date)\n    \n\n    #Remove outliers from dataset\n    data = data[!data$Patient.. %in% outliers$Patient..,]\n    \n    num_patients = nrow(data)\n    \n    #Create TRUE/FALSE index for each registry\n    out_of_date = never_done = out_of_date_never_done = up_to_date = rep(FALSE, num_patients);\n    \n    up_to_date[which(data$Date.of.Latest.Height > one_year_ago &\n                       data$Date.of.Latest.Weight > one_year_ago)] = TRUE\n    \n    out_of_date[which((data$Date.of.Latest.Height <= one_year_ago | \n                             data$Date.of.Latest.Weight <= one_year_ago) &\n                             !is.na(data$Date.of.Latest.BMI), arr.ind=TRUE)] = TRUE\n    \n    never_done[which(is.na(data$Date.of.Latest.BMI))] = TRUE\n    \n    out_of_date_never_done[which(out_of_date | never_done)] = TRUE\n        \n    #+ Get BMI status of up to date patients\n    severely_wasted = wasted = normal = risk_of_overweight = overweight = obese = rep(FALSE, num_patients);\n\n    severely_wasted[which(up_to_date & data$Latest.BMI.Percentile<0.1)] = TRUE\n    wasted[which(up_to_date & data$Latest.BMI.Percentile>=0.1 & data$Latest.BMI.Percentile<3)] = TRUE\n    normal[which(up_to_date & data$Latest.BMI.Percentile>=3 & data$Latest.BMI.Percentile<85)] = TRUE\n    risk_of_overweight[which(up_to_date & data$Latest.BMI.Percentile>=85 & data$Latest.BMI.Percentile<97)] = TRUE\n    overweight[which(up_to_date & data$Latest.BMI.Percentile>=97 & data$Latest.BMI.Percentile<99.9)] = TRUE\n    obese[which(up_to_date & data$Latest.BMI.Percentile>=99.9)] = TRUE\n    \n    at_risk = (up_to_date & !normal)\n    \n    registries <- list(\"data\" = data,\n                       \"outliers\" = outliers,\n                       \"up_to_date\" = up_to_date,\n                       \"out_of_date\" = out_of_date,\n                       \"never_done\" = never_done,\n                       \"out_of_date_never_done\" = out_of_date_never_done,\n                       \"severely_wasted\" = sum(severely_wasted),\n                       \"wasted\" = sum(wasted),\n                       \"normal\" = sum(normal),\n                       \"risk_of_overweight\" = sum(risk_of_overweight),\n                       \"overweight\" = sum(overweight),\n                       \"obese\" = sum(obese),\n                       \"at_risk\" = at_risk)\n\n    return(registries)\n}\n\n\nsaveStatusGraph <- function(output_dir, filename, minAge, maxAge,\n                            num_never_done, num_up_to_date, num_out_of_date, num_total, \n                            current_date) {\n  \n  # Store counts of number of patients in each registry in array\n  status_counts = c(num_total, num_up_to_date, num_out_of_date, num_never_done)\n  status_labels = c(\"Total\", \"Up to Date\", \"Out of Date\", \"Never Done\")\n  status_colours = c(\"mediumpurple2\", \"darkolivegreen3\", \"orangered3\", \"dodgerblue3\")\n  \n  full_filename = sprintf(\"%s/BMI_Status-%s.png\", output_dir, filename)\n  \n  png(full_filename)\n  # Make left margin larger for legend text\n  par(mar = c(5,8,4,2) + 0.1);\n  # Horizontal bar chart\n  bp_status <- barplot(status_counts, col=status_colours, horiz=TRUE,\n                       legend.text=status_labels,\n                       xlab=\"Number of patients\",\n                       main=sprintf(\"Total Peds %d to %d years (n=%d)\\nas of %s\", \n                                    minAge, maxAge, num_total, format(current_date, \"%b %d, %Y\")),\n                       axes=F, xlim=c(0,ceiling(max(status_counts)/100)*100));\n\n  # Make an adjusted vector for bar count positioning\n  adjusted_count = c()\n  index = 1\n  for(i in status_counts) {if (i < 25) {adjusted_count[index]=i*2+40} \n                        else {adjusted_count[index]=i}\n                        index = index+1\n  }\n  \n  # Add axis labels\n  axis(1, at = seq(0,ceiling(max(status_counts)/100)*100,100));\n  axis(2, at = bp_status, labels=status_labels, las=1);\n  text(x=adjusted_count/2, y=bp_status,\n       labels=as.character(status_counts), xpd=TRUE)\n  dev.off();\n}\n\nsaveGrowthConcern <- function(output_dir, filename, minAge, maxAge, reg, current_date) {\n\n  # Store results in vectors\n  bmi_labels = c(\"Severely Wasted\", \"Wasted\", \"Normal\", \"Risk of Overweight\", \"Overweight\", \"Obese\");\n  bmi_counts <- c(reg$severely_wasted, \n                  reg$wasted, reg$normal, reg$risk_of_overweight, reg$overweight, reg$obese);\n  bmi_colours = c(\"dodgerblue3\", \"orangered3\", \"darkolivegreen3\", \"mediumpurple2\", \"mediumturquoise\", \"orange\", \"lightskyblue\");\n  \n  full_filename = sprintf(\"%s/BMI_Count-%s.png\", output_dir, filename);\n  png(full_filename);\n  \n  # Make left margin larger for legend text\n  par(mar = c(5,4,6,2) + 0.1);\n  # Plot BMI status\n  bp_bmi <- barplot(bmi_counts, \n                    main=sprintf(\"Total Peds %d to %d years with up to data BMI (n=%d/%d)\\nas of %s\",\n                                 minAge, maxAge, sum(reg$up_to_date), nrow(reg$data), format(current_date, \"%b %d, %Y\")),\n                    ylab=\"Number of patients\", \n                    col=bmi_colours,\n                    legend.text=bmi_labels,\n                    las=2,\n                    axes=F, ylim=c(0,ceiling(max(bmi_counts)/50)*50));\n  text(bp_bmi, \n       par(\"usr\")[3], \n       labels=bmi_labels, \n       srt=40, xpd=TRUE, adj=c(1.1, 1.1), cex=0.9);\n  \n  # Plot y axis\n  axis(2, at=seq(0,ceiling(max(bmi_counts)/50)*50,50))\n  \n  # Make an adjusted vector for bar count positioning\n  adjusted_count = c()\n  index = 1\n  for(i in bmi_counts) {if (i < 10) {adjusted_count[index]=i*2+10} \n                        else {adjusted_count[index]=i}\n                        index = index+1\n  }\n  \n  \n  text(y=adjusted_count/2, x=bp_bmi, \n       labels=as.character(bmi_counts), xpd=TRUE)\n  dev.off();\n  return(bmi_counts)\n}\n\nsaveHeightWeightCharts <- function(output_dir, filename, data) {\n  \n  #Plot Date of Latest Height vs Date of Latest Weight\n  full_filename = sprintf(\"%s/HeightWeightBoxplot-%s.png\", output_dir, filename)\n  png(full_filename);\n  \n  boxplot(data$Date.of.Latest.Height, data$Date.of.Latest.Weight, \n          names=c(\"Height\", \"Weight\"),\n          col=c(\"darkolivegreen3\", \"lightskyblue\"), \n          main=\"Date of Latest Height and Weight\")\n  \n  dev.off()\n  \n  # Previously used scatter plot\n  \n  # HvW_data = data[!data$Patient.. %in% outliers$Patient..,]\n  # png(filename=paste(output_dir, \"HeightvsWeight.png\", sep=\"/\"));\n  # plot(HvW_data$Date.of.Latest.Weight, HvW_data$Date.of.Latest.Height, \n  #      xaxt=\"n\", yaxt=\"n\",\n  #      main=\"Date of Latest Weight vs. Height\",\n  #      xlab=\"Date of Latest Weight\", \n  #      ylab=\"Date of Latest Height\")\n  # axis.Date(side = 2, x=HvW_data$Date.of.Latest.Height, format = \"%Y\")\n  # axis.Date(side = 1, x=HvW_data$Date.of.Latest.Weight, format = \"%Y\")\n  # abline(a=0, b=1, col=\"green\")\n  # dev.off()\n  \n}\n\nsaveRegistries <- function(output_dir, current_date, filename, reg) {\n      \n    #' Prepare to save registries. Check to make sure xlsx library is installed and install if necessary\n    #' Write to a CSV text file otherwise.\n    if (\"xlsx\" %in% rownames(installed.packages())) {\n      require(xlsx)\n      writeToExcel(output_dir, filename, \n                   reg$data[reg$out_of_date_never_done,], \n                   reg$data[reg$at_risk,], \n                   reg$outliers)\n    } else {\n      \n      response = winDialog(type=\"yesno\", \n                           \"Did not find Excel libraries. Would you like to install them now?\\nYou must be connected to the internet and have Excel installed on this computer\")\n      \n      if (response == \"YES\") {\n        \n        install.packages(\"xlsx\")\n        require(xlsx)\n        \n        if (\"xlsx\" %in% rownames(installed.packages())) {\n          writeToExcel(output_dir, current_date, filename, \n                       reg$data[reg$out_of_date_never_done,], \n                       reg$data[reg$at_risk,], \n                       reg$outliers)\n        } else {\n          winDialog(type=\"ok\", \n                    \"Something went wrong installing excel libraries ('xlsx'). Writing to text files.\");\n          writeToCSV(output_dir, current_date, filename, \n                     reg$data[reg$out_of_date_never_done,], \n                     reg$data[reg$at_risk,], \n                     reg$outliers)\n        }\n      }\n      else {\n        writeToCSV(output_dir, current_date, filename, \n                   reg$data[reg$out_of_date_never_done,], \n                   reg$data[reg$at_risk,], \n                   reg$outliers)\n      }\n  }\n}\n\n\ncreateMasterTable <- function(output_dir, lastDate, master_data, master_count, minAge, maxAge) {\n  \n  # Turn data into a data frame\n  df.MD <- data.frame(master_data)\n  df.MC <- data.frame(master_count)\n  \n  # Turn lastDate into a Date\n  lastDate <- as.Date(lastDate, origin=\"1970-01-01\")\n  \n  # Give column names\n  age_string = sprintf(\"Total Peds %syrs to %syrs\", minAge, maxAge)\n  colnames(df.MD) <- c(\"Date of Data Capture\", age_string, \n                    sprintf(\"%s up to date BMI (12 months)\", age_string), \"Percentage\",\n                    sprintf(\"%s w/o BMI (never done)\", age_string),\n                    sprintf(\"%s w/ out-of-date BMI\", age_string))\n  df.MD$\"Date of Data Capture\" <- as.Date(df.MD$\"Date of Data Capture\", origin=\"1970-01-01\")\n  \n  colnames(df.MC) <- c(\"Date of Data Capture\", \"Severely Wasted\", \"Wasted\", \"Normal\", \n                       \"Risk of Overweight\", \"Overweight\", \"Obese\")\n  df.MC$\"Date of Data Capture\" <- as.Date(df.MC$\"Date of Data Capture\", origin=\"1970-01-01\")\n  \n  # Create workbook and title\n  excel_file <- sprintf(\"%s/Child_Wellness_Master_Table_%s.xlsx\", output_dir, lastDate)\n  outwb <- createWorkbook(type=\"xlsx\")\n  \n  # Create Summary Sheet\n  sheet.MD <- createSheet(outwb, sheetName=\"Summary\")\n  setColumnWidth(sheet.MD, 1:6, 15)\n  \n  csPerc <- CellStyle(outwb, dataFormat=DataFormat(\"0.00%\"))\n  csWrap <- CellStyle(outwb, alignment=Alignment(wrapText=T))\n\n  df.MD.colPerc <- list('4'=csPerc)\n  addDataFrame(df.MD, sheet.MD, colStyle=c(df.MD.colPerc), row.names=F)\n  \n  # Word wrap the header rows\n  row <- getRows(sheet.MD, rowIndex=1)\n  cell <- getCells(row)\n  for (i in 1:6){\n    setCellStyle(cell[[paste('1.',i, sep=\"\")]], csWrap)\n  }\n  \n  # Create count sheet\n  sheet.MC <- createSheet(outwb, sheetName=\"Count\")\n  setColumnWidth(sheet.MC, 1:7, 12)\n  csCenter <- CellStyle(outwb, alignment=Alignment(h=\"ALIGN_CENTER\"))\n  df.MC.colCenter <- list('2'=csCenter, '3'=csCenter, '4'=csCenter,\n                          '5'=csCenter, '6'=csCenter, '7'=csCenter)\n  addDataFrame(df.MC, sheet.MC, colStyle=c(df.MC.colCenter), row.names=F)\n  row <- getRows(sheet.MC, rowIndex=1)\n  cell <- getCells(row)\n  for (c in 1:7){\n    setCellStyle(cell[[sprintf('1.%d', c)]], csWrap)\n  }\n  \n  # Create Percent Change sheet\n  sheet.PC <- createSheet(outwb, sheetName=\"Percent Change\")\n  setColumnWidth(sheet.PC, 1:6, 15)\n  df.PC.colPerc <- list('2'=csPerc, '3'=csPerc, '4'=csPerc,'5'=csPerc)\n  df.PC <- df.MD[,-4]\n  df.PC.final <- c()\n  for (i in 1:(length(df.PC[[1]])-1)) {\n    df.PC.final <- rbind(df.PC.final, cbind(df.PC[[1]][i+1],(df.PC[i+1,2:5]-df.PC[i,2:5])/df.PC[i,2:5]))\n  }\n  colnames(df.PC.final)[1]<-\"Date of Data Capture\" \n  addDataFrame(df.PC.final, sheet.PC, colStyle=c(df.PC.colPerc), row.names=F)\n  row <- getRows(sheet.PC, rowIndex=1)\n  cell <- getCells(row)\n  for (i in 1:5){\n    setCellStyle(cell[[sprintf('1.%d',i)]], csWrap)\n  }\n  \n  # Save Workbook\n  saveWorkbook(outwb, excel_file)\n  \n  # Create Up-to-date over time chart\n  filename <- sprintf(\"Up-To-Date Over Time Chart (%syrs to %syrs) %s.png\", minAge, maxAge, lastDate)\n  xrange <- range(df.MD$\"Date of Data Capture\")\n  yrange <- range(df.MD$\"Percentage\")\n  png(filename=paste(output_dir,filename,sep=\"/\"), width=700, height=480)\n  par(mar=c(5.5, 5.5, 4.1, 2.1), mgp=c(4, 1, 0))\n  heading <- sprintf(\"Percent of Up-to-Date Over Time (%s years to %s years)\", minAge, maxAge)\n  plot(df.MD$\"Date of Data Capture\", df.MD$\"Percentage\", main=heading, ylab=expression(bold(Percent~of~patients~with~up-to-date~BMI)),\n       xlab=expression(bold(Date)), pch=23, col=\"blue\", bg=\"blue\", yaxt=\"n\", ylim=c(round(yrange[1],2)-0.01,round(yrange[2],2)+0.01),\n       xlim=c(xrange[1]-15,xrange[2]+15), xaxt=\"n\", font=2)\n  text(df.MD$\"Date of Data Capture\", df.MD$\"Percentage\", sprintf(\"%.2f%%\", df.MD$\"Percentage\"*100), pos=1, col=\"blue\")\n  lines(df.MD$\"Date of Data Capture\", df.MD$\"Percentage\", type=\"o\", col=\"blue\", lwd=1.5)\n  axis(2,at=seq(round(yrange[1],2)-0.01, round(yrange[2],2)+0.01, 0.005),\n       labels=sprintf(\"%.2f%%\", seq(round(yrange[1],2)-0.01, round(yrange[2],2)+0.01, 0.005)*100),\n       las=2, cex.axis=0.85)\n  axis.Date(1, df.MD$\"Date of Data Capture\", at=seq(xrange[1]-15,xrange[2]+15,by=\"months\"), \"%B-%d-%Y\")\n  \n  dev.off()\n}\n\n#Write registries to three seperate CSV files\nwriteToCSV <- function(output_dir=getwd(), current_date=Sys.Date(), filename, out_of_date_never_done=data.frame(), at_risk=data.frame(), outliers=data.frame()) {\n  write.csv(out_of_date_never_done,\n            file=sprintf(\"%s/CW_OutOfDate_%s_%s.txt\", output_dir, filename, format(current_date, \"%d%b%Y\")),\n            row.names=FALSE)\n  write.csv(at_risk[order(at_risk$Latest.BMI.Percentile, decrease=TRUE), ],\n            file=sprintf(\"%s/CW_AtRisk_%s_%s.txt\", output_dir, filename, format(current_date, \"%d%b%Y\")),\n            row.names=FALSE)\n  write.csv(outliers,\n            file=sprintf(\"%s/CW_Outliers_%s_%s.txt\", output_dir, filename, format(current_date, \"%d%b%Y\")),\n            row.names=FALSE)\n}\n\n#Write registries to excel file (requires R xlsx package)\nwriteToExcel <- function(output_dir=getwd(), filename, out_of_date_never_done=data.frame(), at_risk=data.frame(), outliers=data.frame()) {\n  excel_file = sprintf(\"%s/Child_Wellness_Registries_%s.xlsx\", output_dir, filename)\n  \n  if (nrow(out_of_date_never_done) != 0) {\n    write.xlsx(out_of_date_never_done,\n               file=excel_file, \n               sheetName=\"Out Of Date\", \n               row.names=FALSE);\n  }\n  if (nrow(at_risk) != 0) {\n    write.xlsx(at_risk, \n               file=excel_file, \n               sheetName=\"At Risk\",\n               row.names=FALSE,\n               append=TRUE);\n  }\n  if (nrow(outliers) != 0) {\n    write.xlsx(outliers, \n               file=excel_file, \n               sheetName=\"Outliers\",\n               row.names=FALSE,\n               append=TRUE);\n  }\n\n}\n#+\n#' Run Application using this command\n#suppressWarnings(runReport())\n",
    "created" : 1403273542967.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "657484039",
    "id" : "1A94482E",
    "lastKnownWriteTime" : 1407765852,
    "path" : "~/GitHub/ChildWellness/BMI_Analysis.R",
    "project_path" : "BMI_Analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}