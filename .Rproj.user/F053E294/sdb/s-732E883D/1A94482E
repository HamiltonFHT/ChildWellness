{
    "contents" : "#' TODO:\n#'     Confirm outlier criteria\n\n\n#' Child Wellness Report Generators\n#' Produces three registries:\n#' BMI never measured\n#' BMI 1 year out of date\n#' BMI up-to-date\n#' Produces two plots:\n#'  # of patients in each of the above 3 registries\n#'  # of up-to-date patients in each BMI category\n\n\nwriteToCSV <- function(output_dir=getwd(), current_date=Sys.Date(), out_of_date_never_done=data.frame(), at_risk=data.frame(), outliers=data.frame()) {\n  file_ending = paste(format(current_date, \"_%d%b%Y\"), \".txt\", sep=\"\")\n  out_of_date_file = paste(\"CW_OutOfDate\", file_ending, sep=\"\");\n  at_risk_file = paste(\"CW_AtRisk\", file_ending, sep=\"\");\n  outliers_file = paste(\"CW_Outliers\", file_ending, sep=\"\");\n  \n  write.csv(out_of_date_never_done,\n            file=paste(output_dir, out_of_date_file, sep=\"/\"),\n            row.names=FALSE)\n  write.csv(at_risk[order(at_risk$Latest.BMI.Percentile, decrease=TRUE), ],\n            file=paste(output_dir, at_risk_file, sep=\"/\"),\n            row.names=FALSE)\n  write.csv(outliers,\n            file=paste(output_dir, outliers_file, sep=\"/\"),\n            row.names=FALSE)\n}\n\nwriteToExcel <- function(output_dir=getwd(), current_date=Sys.Date(), out_of_date_never_done=data.frame(), at_risk=data.frame(), outliers=data.frame()) {\n  excel_file = paste(output_dir, \n                     paste(\"Child_Wellness_Registries_\", format(current_date, format=\"%d%b%Y\"), \".xlsx\", sep=\"\"), \n                     sep=\"/\");\n  write.xlsx(out_of_date,\n             file=excel_file, \n             sheetName=\"Out Of Date\", \n             row.names=FALSE);\n  write.xlsx(at_risk, \n             file=excel_file, \n             sheetName=\"At Risk\", \n             row.names=FALSE,\n             append=TRUE);\n  write.xlsx(outliers, \n             file=excel_file, \n             sheetName=\"Outliers\", \n             row.names=FALSE,\n             append=TRUE);\n}\n\n\n#+\n# Prompt user for file to read\ninput_file = file.choose();\n\nif (input_file == \"\") {\n  print(\"No file selected\");\n  return;\n}\ndf = read.csv(input_file)\n\n#+ \n# Prompt user for folder to save results to \noutput_dir = choose.dir(default=getwd(), caption=\"Select a directory to save files to\");\n\nif (is.na(output_dir)) {\n  output_dir = getwd();\n  print(\"Saving to working directory: \");\n  print(getwd());\n}\n\n#+\n#' Convert to R dates\ndf$Date.of.Latest.Height = as.Date(df$Date.of.Latest.Height, format=\"%b %d, %Y\")\ndf$Date.of.Latest.Weight = as.Date(df$Date.of.Latest.Weight, format=\"%b %d, %Y\")\ndf$Date.of.Latest.BMI = as.Date(df$Date.of.Latest.BMI, format=\"%b %d, %Y\")\ndf$Date.of.Latest.BMI.Percentile = as.Date(df$Date.of.Latest.BMI.Percentile, format=\"%b %d, %Y\")\ndf$Current.Date = as.Date(df$Current.Date, format=\"%b %d, %Y\")\n\n# Convert BMI percentile to number\ndf$Latest.BMI.Percentile <- as.numeric(as.character(df$Latest.BMI.Percentile))\ndf$Latest.BMI <- as.numeric(as.character(df$Latest.BMI))\n\n# Get the current date, and one year ago\ncurrent_date = df$Current.Date[1]\none_year_ago = seq(current_date, length=2, by= \"-12 months\")[2]\n\n#+\n#' Create Registries\n#' May not add up to all patients due to outliers and data entry issues.\nnever_done = subset(df, is.na(df$Date.of.Latest.BMI))\nup_to_date = subset(df, df$Date.of.Latest.Height > one_year_ago & df$Date.of.Latest.Weight > one_year_ago)\nout_of_date = subset(df, (df$Date.of.Latest.Height <= one_year_ago | \n                            df$Date.of.Latest.Weight <= one_year_ago) &\n                       !is.na(df$Date.of.Latest.BMI))\ntop_85th_percentile = subset(df, df$Latest.BMI.Percentile > 85)\n\nout_of_date_never_done = merge(out_of_date, never_done)\n\n\n#' Outliers\n#' BMI < 11 or BMI > 40\n#' Date of measurement more recent than date of report\n#' Height < ?\n#' Weight < ?\n\noutliers = subset(df, df$Latest.BMI < 11 | df$Latest.BMI > 40 | df$Date.of.Latest.Height > current_date |\n                    df$Date.of.Latest.Weight > current_date | df$Date.of.Latest.BMI > current_date)\n\n# Get counts of number of patients in each registry\nnum_never_done = nrow(never_done)\nnum_up_to_date = nrow(up_to_date)\nnum_out_of_date = nrow(out_of_date)\nnum_total = nrow(df)\n\nstatus_counts = c(num_total, num_up_to_date, num_out_of_date, num_never_done)\nstatus_labels = c(\"Total\", \"Up to Date\", \"Out of Date\", \"Never Done\")\nstatus_colours = c(\"mediumpurple2\", \"darkolivegreen3\", \"orangered3\", \"dodgerblue3\")\n\n#+\n#' Plot number of patients in each of the registries\npng(filename=paste(output_dir, \"BMI_Status.png\", sep=\"/\"))\n# Make left margin larger for legend text\npar(mar = c(5,8,4,2) + 0.1);\n# Horizontal bar chart\nbp_status <- barplot(status_counts, col=status_colours, horiz=TRUE,\n                     legend.text=status_labels,\n                     xlab=\"Number of patients\", \n                     main=paste(\"Total Peds 2 to 5 years (n=\",num_total,\") \\nas of \",\n                                format(current_date, \"%b %d, %Y\"), sep=\"\"));\n# Add axis labels\naxis(2, at = bp_status, labels=status_labels, las=1);\ntext(x=status_counts/2, y=bp_status,\n     labels=as.character(status_counts), xpd=TRUE,\n     fontface=\"bold\")\ndev.off();\n\n#+ Get BMI status of up to date patients\nseverely_wasted = subset(up_to_date, \n                         up_to_date$Latest.BMI.Percentile<0.1)\nwasted = subset(up_to_date, \n                up_to_date$Latest.BMI.Percentile>=0.1 &\n                  up_to_date$Latest.BMI.Percentile<3)\nnormal = subset(up_to_date, \n                up_to_date$Latest.BMI.Percentile>3 &\n                  up_to_date$Latest.BMI.Percentile<85)\nrisk_of_overweight = subset(up_to_date, \n                            up_to_date$Latest.BMI.Percentile>=85 &\n                              up_to_date$Latest.BMI.Percentile<97)\noverweight = subset(up_to_date, \n                    up_to_date$Latest.BMI.Percentile>=97 &\n                      up_to_date$Latest.BMI.Percentile<99.9)\nobese = subset(up_to_date, \n               up_to_date$Latest.BMI.Percentile>=99.9)\n\n#At risk registry is everyone not in the normal weight category\nat_risk = rbind(severely_wasted, \n                wasted, \n                risk_of_overweight, \n                overweight, \n                obese)\n\n# Store results in vectors\nbmi_labels = c(\"Severely Wasted\", \"Wasted\", \"Normal\", \"Risk of Overweight\", \"Overweight\", \"Obese\");\nbmi_counts <- c(nrow(severely_wasted), nrow(wasted), nrow(normal), nrow(risk_of_overweight), nrow(overweight), nrow(obese));\nbmi_colours = c(\"dodgerblue3\", \"orangered3\", \"darkolivegreen3\", \"mediumpurple2\", \"mediumturquoise\", \"orange\", \"lightskyblue\");\n\npng(filename=paste(output_dir, \"BMI_Count.png\", sep=\"/\"));\n# Make left margin larger for legend text\npar(mar = c(5,4,6,2) + 0.1);\n# Plot BMI status\nbp_bmi <- barplot(bmi_counts, \n                  main=paste(\"Total Peds 2 to 5 years with up to date BMI \",\n                             \"(n=\",num_up_to_date,\"/\", num_total, \") \\nas of \",\n                             format(current_date, \"%b %d, %Y\"), sep=\"\"), \n                  ylab=\"Number of patients\", \n                  col=bmi_colours,\n                  legend.text=bmi_labels,\n                  las=2);\ntext(bp_bmi, \n     par(\"usr\")[3], \n     labels=bmi_labels, \n     srt=40, xpd=TRUE, adj=c(1.1, 1.1), cex=0.9);\ntext(y=bmi_counts/2, x=bp_bmi, \n     labels=as.character(bmi_counts), xpd=TRUE, \n     fontface=\"bold\")\ndev.off();\n\nHvW_df = df[!df$Patient.. %in% outliers$Patient..,]\npng(filename=paste(output_dir, \"HeightvsWeight.png\", sep=\"/\"));\nplot(HvW_df$Date.of.Latest.Weight, HvW_df$Date.of.Latest.Height, \n     xaxt=\"n\", yaxt=\"n\",\n     main=\"Date of Latest Weight vs. Height\",\n     xlab=\"Date of Latest Weight\", \n     ylab=\"Date of Latest Height\")\naxis.Date(side = 2, x=HvW_df$Date.of.Latest.Height, format = \"%Y\")\naxis.Date(side = 1, x=HvW_df$Date.of.Latest.Weight, format = \"%Y\")\nabline(a=0, b=1, col=\"green\")\ndev.off()\n\n\n#' Prepare to save registries. Check to make sure xlsx library is installed and install if necessary\n#' Write to a CSV text file otherwise.\nif (\"xlsx\" %in% rownames(installed.packages())) {\n  require(xlsx)\n  writeToExcel(output_dir, current_date, out_of_date_never_done, at_risk, outliers)\n} else {\n  \n  response = winDialog(type=\"yesno\", \n                       \"Did not find Excel libraries. Would you like to install them now?\\nYou must be connected to the internet and have Excel installed on this computer\")\n  \n  if (response == \"YES\") {\n    \n    install.packages(\"xlsx\")\n    \n    if (\"xlsx\" %in% rownames(installed.packages())) {\n      writeToExcel(output_dir, current_date, out_of_date_never_done, at_risk, outliers)\n    } else {\n      winDialog(type=\"ok\", \n                \"Something went wrong installing excel libraries ('xlsx'). Writing to text files.\");\n      writeToCSV(output_dir, current_date, out_of_date_never_done, at_risk, outliers)\n    }\n  }\n  else {\n    writeToCSV(output_dir, current_date, out_of_date_never_done, at_risk, outliers)\n  }\n}\n\nwinDialog(type=\"ok\",\n          paste(\"Finished! You can find the files in \", output_dir, sep=\"\"))",
    "created" : 1403273542967.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2208350803",
    "id" : "1A94482E",
    "lastKnownWriteTime" : 1403273559,
    "path" : "//hamiltonfht/data/Private/tom.sitter/My Documents/GitHub/ChildWellness/BMI_Analysis.R",
    "project_path" : "BMI_Analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}